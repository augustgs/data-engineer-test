starting_df <- read.csv(file="percentage_match (2).csv", header=FALSE, sep=",",stringsAsFactors = FALSE)
ano <- as.Date(c('2001-7-01', '2001-08-01', '2001-09-01', '2001-10-01', '2001-11-01', '2001-12-01', '2002-1-01', '2002-2-01', '2002-3-01', '2002-4-01', '2002-5-01', '2002-6-01', '2002-7-01', '2002-8-01', '2002-9-01', '2002-10-01', '2002-11-01', '2002-12-01', '2003-1-01', '2003-2-01', '2003-3-01', '2003-4-01', '2003-5-01', '2003-6-01', '2003-7-01', '2003-8-01', '2003-9-01', '2003-10-01', '2003-11-01', '2003-12-01', '2004-1-01', '2004-2-01', '2004-3-01', '2004-4-01', '2004-5-01', '2004-6-01', '2004-7-01', '2004-8-01', '2004-9-01', '2004-10-01', '2004-11-01', '2004-12-01', '2005-1-01', '2005-2-01', '2005-3-01', '2005-4-01', '2005-5-01', '2005-6-01', '2005-7-01', '2005-8-01', '2005-9-01', '2005-10-01', '2005-11-01', '2005-12-01', '2006-1-01', '2006-2-01', '2006-3-01', '2006-4-01', '2006-5-01', '2006-6-01', '2006-7-01', '2006-8-01', '2006-9-01', '2006-10-01', '2006-11-01', '2006-12-01', '2007-1-01', '2007-2-01', '2007-3-01', '2007-4-01', '2007-5-01', '2007-6-01', '2007-7-01', '2007-8-01', '2007-9-01', '2007-10-01', '2007-11-01', '2007-12-01', '2008-1-01', '2008-2-01', '2008-3-01', '2008-4-01', '2008-5-01', '2008-6-01', '2008-7-01', '2008-8-01', '2008-9-01', '2008-10-01', '2008-11-01', '2008-12-01', '2009-1-01', '2009-2-01', '2002-3-01', '2002-4-01', '2009-5-01', '2009-6-01', '2009-7-01', '2009-8-01', '2009-9-01', '2009-10-01', '2009-11-01', '2009-12-01', '2010-1-01', '2010-2-01', '2010-3-01', '2010-4-01', '2010-5-01', '2010-6-01', '2010-7-01', '2010-8-01', '2010-9-01', '2010-10-01', '2010-11-01', '2010-12-01', '2011-1-01', '2011-2-01', '2011-3-01', '2011-4-01', '2011-5-01', '2011-6-01', '2011-7-01', '2011-8-01', '2011-9-01', '2011-10-01', '2011-11-01', '2011-12-01', '2012-1-01', '2012-2-01', '2012-3-01', '2012-4-01', '2012-5-01', '2012-6-01', '2012-7-01', '2012-8-01', '2012-9-01', '2012-10-01', '2012-11-01', '2012-12-01', '2013-1-01', '2013-1-01', '2013-2-01', '2013-3-01', '2013-4-01', '2013-5-01', '2013-6-01', '2013-7-01', '2013-8-01', '2013-9-01', '2013-10-01', '2013-11-01', '2013-12-01', '2014-1-01', '2014-2-01', '2014-3-01', '2014-4-01', '2014-5-01', '2014-6-01', '2014-7-01', '2014-8-01', '2014-9-01', '2014-10-01', '2014-11-01', '2014-12-01', '2015-1-01', '2015-2-01', '2015-3-01', '2015-4-01', '2015-5-01', '2015-6-01', '2015-7-01', '2015-8-01', '2015-9-01', '2015-10-01', '2015-11-01', '2015-12-01', '2016-1-01', '2016-2-01', '2016-3-01', '2016-4-01', '2016-5-01', '2016-6-01', '2016-7-01', '2016-8-01', '2016-9-01', '2016-10-01', '2016-11-01', '2017-1-01', '2017-2-01', '2017-3-01', '2017-4-01', '2017-5-01', '2017-6-01', '2017-7-01', '2017-8-01', '2017-9-01', '2017-10-01', '2017-11-01', '2017-12-01'))
valor <- c(1.681,1.711,1.718,1.779,1.780,1.775,1.588,1.509,1.574,1.713,1.722,1.711,1.767,1.751,1.742,1.761,1.978,2.001,2.160,2.223,2.215,2.195,2.113,2.026,1.971,1.975,2.003,1.997,1.993,1.998,2.007,2.003,1.981,1.972,2.086,2.157,2.203,2.226,2.232,2.262,2.214,2.303,2.296,2.285,2.291,2.302,2.283,2.256,2.267,2.273,2.401,2.470,2.478,2.483,2.511,2.523,2.587,2.595,2.582,2.545,2.557,2.559,2.554,2.547,2.538,2.531,2.523,2.516,2.518,2.532,2.540,2.527,2.507,2.487,2.471,2.475,2.487,2.509,2.505,2.488,2.493,2.493,2.494,2.490,2.495,2.500,2.506,2.508,2.513,2.518,2.516,2.518,2.514,2.500,2.487,2.488,2.492,2.498,2.488,2.528,2.551,2.556,2.586,2.611,2.578,2.555,2.550,2.534,2.534,2.542,2.544,2.572,2.589,2.602,2.612,2.622,2.670,2.824,2.842,2.738,2.735,2.736,2.742,2.750,2.746,2.750,2.743,2.734,2.740,2.742,2.737,2.731,2.729,2.725,2.723,2.731,2.747,2.754,2.763,2.887,2.886,2.876,2.862,2.848,2.839,2.835,2.834,2.834,2.841,2.946,2.956,2.955,2.980,2.988,2.978,2.966,2.957,2.960,2.963,2.960,3.009,3.031,3.032,3.301,3.323,3.308,3.299,3.301,3.296,3.295,3.277,3.480,3.576,3.633,3.676,3.710,3.730,3.717,3.674,3.646,3.645,3.651,3.648,3.662,3.671,3.734,3.768,3.755,3.687,3.635,3.617,3.548,3.553,3.781,3.881,3.895,4.004,4.085)
library(ggplot2)
library(forecast)
gasolina.data <- data.frame (ano, valor)
str(gasolina.data)
valor <- c(1.681,1.711,1.718,1.779,1.780,1.775,1.588,1.509,1.574,1.713,1.722,1.711,1.767,1.751,1.742,1.761,1.978,2.001,2.160,2.223,2.215,2.195,2.113,2.026,1.971,1.975,2.003,1.997,1.993,1.998,2.007,2.003,1.981,1.972,2.086,2.157,2.203,2.226,2.232,2.262,2.214,2.303,2.296,2.285,2.291,2.302,2.283,2.256,2.267,2.273,2.401,2.470,2.478,2.483,2.511,2.523,2.587,2.595,2.582,2.545,2.557,2.559,2.554,2.547,2.538,2.531,2.523,2.516,2.518,2.532,2.540,2.527,2.507,2.487,2.471,2.475,2.487,2.509,2.505,2.488,2.493,2.493,2.494,2.490,2.495,2.500,2.506,2.508,2.513,2.518,2.516,2.518,2.514,2.500,2.487,2.488,2.492,2.498,2.488,2.528,2.551,2.556,2.586,2.611,2.578,2.555,2.550,2.534,2.534,2.542,2.544,2.572,2.589,2.602,2.612,2.622,2.670,2.824,2.842,2.738,2.735,2.736,2.742,2.750,2.746,2.750,2.743,2.734,2.740,2.742,2.737,2.731,2.729,2.725,2.723,2.731,2.747,2.754,2.763,2.887,2.886,2.876,2.862,2.848,2.839,2.835,2.834,2.834,2.841,2.946,2.956,2.955,2.980,2.988,2.978,2.966,2.957,2.960,2.963,2.960,3.009,3.031,3.032,3.301,3.323,3.308,3.299,3.301,3.296,3.295,3.277,3.480,3.576,3.633,3.676,3.710,3.730,3.717,3.674,3.646,3.645,3.651,3.648,3.662,3.671,3.734,3.768,3.755,3.687,3.635,3.617,3.548,3.553,3.781,3.881,3.895,4.004,4.085)
valor.timeseries <- ts(valor,start = c(2001,7),frequency = 12)
valor.timeseries
plot(valor.timeseries, main="Dataset Normalizado",xlim=c(2001,2018),las=3, ylab="Preço médio de Revenda (R$)")
?plot
fit <- auto.arima(valor.timeseries)
fit
fcast <- forecast(fit, h=12)
fcast
plot(fcast, main = 'teste', xlim=c(2001,2019),las=2, ylab="Preço médio de Revenda (R$)", xlab="Anos")
?plot
grid()
fcast
plot(fcast, main = 'teste', xlim=c(2001,2018),las=2, ylab="Preço médio de Revenda (R$)", xlab="Anos")
# Chama Biblioteca readr para ler arquivos tsv
library(readr)
# Seta o path a ser utilizado
setwd("C:/Users/Augusto/Desktop/indeorum/")
# lê o arquivo "data.tsv" e coloca no dataset "data"
data <- read_tsv("data.tsv", na = ":")
a <- parse_date_time(data$publication_date, c("ymd"))
View(data)
library(lubridate)
# Procura formatos y-m-d, os muda para d-m=y UTC e os coloca no dataset "a"
a <- parse_date_time(data$publication_date, c("ymd"))
# Procura formatos d-m-y, os muda para d-m=y UTC e os coloca no dataset "b"
b <- parse_date_time(data$publication_date, c("dmy"))
# Combina os 2 datasets ("a" e "b") mantendo suas posições, os colocando no dataset "a"
a[is.na(a)] <- b[!is.na(b)]
# retira UTC do fim das datas
a <- gsub(" UTC", "", as.character(factor(a)))
# realoca o dataset "a" com suas modificações na tabela "publication_date" do dataset "data"
data$publication_date <- a
test <- strsplit(data$start_end, "|" , fixed=TRUE)
test
data
data
View(data)
test <- strsplit(data$start_end, "|" , fixed=TRUE)
test
library(stringr)
str_split_fixed(data$start_end, "|", 2)
str_split_fixed(as.character(data$start_end),'|">',2)
test <- str_split_fixed(as.character(data$start_end),'|">',2)
test
head(test)
test <- str_split_fixed(as.character(data$start_end),'| ">',2)
head(test)
test <- str_split_fixed(as.character(data$start_end),'|'>',2)
test <- str_split_fixed(as.character(data$start_end),'|' ,2)
head(test)
test <- str_split_fixed(as.character(data$start_end),'|' ,2)
asd
library(stringr)
asdasd
head(test)
head(test)
head(test)
source('C:/Users/Augusto/Desktop/indeorum/teste.r')
test <- str_split_fixed(as.character(data$start_end), '|', 2)
head(test)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split_fixed(fruits, "and ", 3)
str_split_fixed(fruits, "and ", 4)
fruits <- c(data$start_end)
str_split_fixed(fruits, "|", 2)
as.data.frame(str_match(data$start_end, "|")[,-1])
as.data.frame(str_match(data$start_end, "^(.*):(.*)-(.*)$")[,-1])
as.data.frame(str_match(data$start_end, "^(.*):(.*)-(.*)$")[,-2])
as.data.frame(str_match(data$start_end, "^(.*)|(.*)$")[,-1])
as.data.frame(str_match(data$start_end, "^(.*)-(.*)-(.*)|(.*)$")[,-1])
head(as.data.frame(str_match(data$start_end, "^(.*)-(.*)-(.*)|(.*)$")[,-1]))
test <- str_split_fixed(as.character(data$start_end), '|', 2)
head(test)
x <- strsplit(as.character(data$start_end), "|")
head(x)
x <- strsplit(as.character(data$start_end), "|", fixed = true)
x <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
head(x)
test <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
#head(test)
str_extract(strings, test)
str_match(strings, test)
test <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
head(test)
str_extract_all(strings, test)
sub(".*:", "", data$start_end)
sub(".*|", "", data$start_end)
sub(".*:", "", data$start_end)
lst <- strsplit(test, split = "|")
test <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
head(test)
lst <- strsplit(test, split = "|")
lst <- strsplit(test, split = "")
lst <- strsplit(test)
lst <- strsplit(test, split = "*")
lst <- strsplit(test, split = "")
separate(df[-1], test, 1:2, " ", extra = "merge")
library(tidyr)
separate(df[-1], test, 1:2, " ", extra = "merge")
head(test)
summary(test)
df <- data.frame(ID=11:13, FOO=test)
df <- data.frame(test)
test <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
summary(test)
head(test)
df <- data.frame(matrix(unlist(test), nrow=132, byrow=T),stringsAsFactors=FALSE)
View(df)
View(data)
df <- data.frame(matrix(unlist(test)),stringsAsFactors=FALSE)
df
df <- data.frame(matrix(unlist(test), nrow=2, byrow=T),stringsAsFactors=FALSE)
df
df <- data.frame(matrix(unlist(test), nrow=2, byrow=T),stringsAsFactors=FALSE)
View(df)
a=do.call(rbind,lapply(test,paste0,collapse=" "))
data.frame(pos=rownames(a),word=a,row.names = NULL)
View(a)
aggregate(.~ind,stack(test),paste,collapse=' ')
a=aggregate(.~ind,stack(test),paste,collapse=' ')
a=do.call(rbind,lapply(test,paste,collapse=" "))
data.frame(pos=rownames(a),word=a,row.names = NULL)
a=aggregate(.~ind,stack(test),paste,collapse=' ')
View(a)
map(test, paste0, collapse = " ") %>% bind_rows() %>% gather(POS, Word)
separate(data = df, col = FOO, into = c("left", "right"), sep = "\\|")
separate(data = df, col = test$V1, into = c("left", "right"), sep = "\\|")
map(test, paste0, collapse = " ") %>% bind_rows() %>% gather(POS, Word)
test <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
head(test)
df  <-  as.data.frame(matrix(unlist(test), nrow=length(unlist(test[1]))))
df
df[test] <- lapply(df[test], unlist)
Split <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
Start <- sapply(Split, "[", 1)
End <- sapply(Split, "[", 2)
# Cria coluna End e coloca data
# Chama Biblioteca readr para ler arquivos tsv
library(readr)
# Seta o path a ser utilizado
setwd("C:/Users/Augusto/Desktop/indeorum/")
# lê o arquivo "data.tsv" e coloca no dataset "data"
data <- read_tsv("data.tsv", na = ":")
# Chama Biblioteca lubridate que serve para trabalhar com datas
library(lubridate)
# Procura formatos y-m-d, os muda para y-m-d UTC e os coloca no dataset "a"
a <- parse_date_time(data$publication_date, c("ymd"))
# Procura formatos d-m-y, os muda para y-m-d UTC e os coloca no dataset "b"
b <- parse_date_time(data$publication_date, c("dmy"))
# Combina os 2 datasets ("a" e "b") mantendo suas posições, os colocando no dataset "a"
a[is.na(a)] <- b[!is.na(b)]
# retira UTC do fim das datas
a <- gsub(" UTC", "", as.character(factor(a)))
# realoca o dataset "a" com suas modificações na tabela "publication_date" do dataset "data"
data$publication_date <- a
# Chama Biblioteca de manipulação de caracteres (char)
library(stringr)
# Separa Data Start e Data End da coluna "start_end"
Split <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
# Cria coluna Start e coloca data
Start <- sapply(Split, "[", 1)
# Cria coluna End e coloca data
End <- sapply(Split, "[", 2)
data$data_start <- Start
View(data)
End == 'nill' <- NA
if(End == 'nill')
End = NA
}
if(End == 'nill'){
End = NA
}
if(End == 'nill')
End = NA
data$data_end <- End
data[data_end == 'nill'] <- NA
data
View(data)
data$data_end <- End
data
View(data)
End <- sapply(Split, "[", 2)
data$data_end <- End
data
data[data_end == 'nill'] <- NA
!is.na(data$data_end)
is.na(data$data_end)
grepl(data$data_end, chars)
grepl(data$data_end, "nill")
library(naniar)
install.packages(naniar)
install.packages('naniar')
library(naniar)
na_strings <- c("nill")
replace_with_na_all(condition = ~.x %in% na_strings)
replace_with_na_all(condition = data$data_end %in% na_strings)
replace_with_na_all(condition = ~.data$data_end %in% na_strings)
replace_with_na_all(condition = ~.x %in% na_strings, data=data$data_end)
data
View(data)
mutate_all(data$data_end, funs(na_if(.,"nill")))
library(dplyr)
mutate_all(data$data_end, funs(na_if(.,"nill")))
data$data_end %>% mutate_if(is_character, funs(na_if(.,"nill")))
data$data_end %>% mutate_if(is_character, funs(na_if(.,"nill")))
data$data_end %>% mutate_if(is_character, funs(na_if(.,"nill")))
data %>% mutate_if(is_character, funs(na_if(.,"nill")))
data$data_end
data[data_end==""]<-NA
data[data$data_end=="nill"]<-NA
data[data=="nill"]<-NA
View(data)
data$start_end <- NULL
View(data)
View(data)
data_pub_type <- group_by(data, type)
data_pub_type
View(data_pub_type)
summarize(data, data_pub_type)
summarize(data)
summarize(data_pub_type)
data[data=="jornal"]<-"journal"
data[data=="artilce"]<-"article"
data_pub_type <- group_by(data, type)
summarize(data_pub_type)
data[data=="other"]<-"other"
data_pub_type <- group_by(data, type)
summarize(data_pub_type)
# Agrupa por instituição
data_institution <- group_by(data, institution)
summarize(data_institution)
View(data)
View(data_institution)
data_institution[0]
data_institution[1]
data_institution$ID <- seq.int(nrow(data))
data_institution
data_institution$ID
data_institution
data_institution <- group_by(data, institution)
data_institution
summarize(data_institution)
data_institution2 <- summarize(data_institution)
data_institution2
data_institution2$ID <- seq.int(nrow(data))
data_institution2$ID <- seq.int(nrow(data))
data_institution2$ID <- seq.int(nrow(data_institution2))
data_institution2
data_pub_type <- group_by(data, type)
data_pub_type2 <- summarize(data_pub_type)
data_pub_type2$ID <- seq.int(nrow(data_pub_type2))
data_pub_type2
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
DF2$a <- row.names(DF2)
DF3 <- merge(DF1, DF2, by = "a", all.x = TRUE)
DF3 <- merge(DF1, DF2, by = "a", all.institution = TRUE)
DF3 <- merge(DF1, DF2, by = "institution", all.x = TRUE)
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
# Create a column called a in DF2 shows the row id
DF2$institution <- row.names(DF2)
# Merge DF1 and DF2 by a
DF3 <- merge(DF1, DF2, by = "institution", all.x = TRUE)
# Change the name of column l to be b
names(DF3) <- c("a", "b")
DF3 <- merge(DF1$type, DF2$type, by = "type", all.x = TRUE)
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
View(DF3)
DF3
View(DF3)
View(DF2)
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
DF2$institution <- row.names(DF2)
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
names(DF3) <- c("a", "b")
DF3
View(DF3)
View(DF2)
names(DF3) <- c("type", "type_id","name", "jobs", "institution", "production", "publication_date", "type", "data_start", "data_end")
names(DF3) <- c("type", "type_id","name", "jobs", "institution", "production", "publication_date", "data_start", "data_end")
DF3
View(DF3)
## Cria DataFrames de Tipos
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
# Cria uma coluna chamada "tipo" e mostra seu ID
DF2$type <- row.names(DF2)
# Merge DataFrame 1 e DataFrame 2 por "type"
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
# Muda Nomes Data Frame
names(DF3) <- c("type", "type_id","name", "jobs", "institution", "production", "publication_date", "data_start", "data_end")
View(DF3)
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
View(DF3)
View(DF2)
View(DF3)
DF2 <- row.names(DF2)
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
DF2$institution <- row.names(DF2)
DF2$institution <- row.names(DF2)
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
DF2$type <- row.names(DF2)
DF2$institution <- row.names(DF2)
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
# Cria uma coluna chamada "type" e mostra seu ID
DF2$type <- row.names(DF2)
DF2$institution <- row.names(DF2)
# Merge DataFrame 1 e DataFrame 2 por "type"
DF3 <- merge(DF1, DF2, by = "type", all.x = TRUE)
# Muda Nomes Data Frame
names(DF3) <- c("type", "type_id","name", "jobs", "institution", "production", "publication_date", "data_start", "data_end")
names(DF3) <- c("type", "type_id","name", "jobs", "institution", "production", "publication_date", "data_start", "data_end")
# Instala Pacotes de Bibliotecas
install.packages('readr')
install.packages('stringr')
install.packages('lubridate')
# Chama Biblioteca readr para ler arquivos tsv
library(readr)
# Chama Biblioteca de manipulação de caracteres (char)
library(stringr)
# Chama Biblioteca lubridate que serve para trabalhar com datas
library(lubridate)
# Seta o path a ser utilizado
setwd("C:/Users/Augusto/Desktop/indeorum/")
# lê o arquivo "data.tsv" e coloca no dataset "data"
data <- read_tsv("data.tsv", na = ":")
## MANIPULAÇÂO DE FORMATO DE DATAS
# Procura formatos y-m-d, os muda para y-m-d UTC e os coloca no dataset "a"
a <- parse_date_time(data$publication_date, c("ymd"))
# Procura formatos d-m-y, os muda para y-m-d UTC e os coloca no dataset "b"
b <- parse_date_time(data$publication_date, c("dmy"))
# Combina os 2 datasets ("a" e "b") mantendo suas posições, os colocando no dataset "a"
a[is.na(a)] <- b[!is.na(b)]
# retira UTC do fim das datas
a <- gsub(" UTC", "", as.character(factor(a)))
# realoca o dataset "a" com suas modificações na tabela "publication_date" do dataset "data"
data$publication_date <- a
## MANIPULAÇÃO DATAS "START" e "END" + LIMPEZA
# Separa Data Start e Data End da coluna "start_end"
Split <- strsplit(as.character(data$start_end), "|", fixed = TRUE)
# Cria coluna Start e coloca data
Start <- sapply(Split, "[", 1)
# Cria coluna End e coloca data
End <- sapply(Split, "[", 2)
# Coloca "Start" na coluna "data_start"
data$data_start <- Start
# Coloca "End" na coluna "data_end"
data$data_end <- End
# Coloca NA se valor "nill"
data[data=="nill"]<-NA
# Deleta Coluna "start_end"
data$start_end <- NULL
# Arruma Erros de escrita
data[data=="jornal"]<-"journal"
data[data=="artilce"]<-"article"
data[data=="other"]<-"other"
# Agrupa por tipo de publicação e coloca a coluna ID
data_pub_type <- group_by(data, type)
data_pub_type2 <- summarize(data_pub_type)
#coloca a coluna ID
data_pub_type2$ID <- seq.int(nrow(data_pub_type2))
# Agrupa por instituição e
data_institution <- group_by(data, institution)
data_institution2 <- summarize(data_institution)
#coloca a coluna ID
data_institution2$ID <- seq.int(nrow(data_institution2))
## Cria DataFrames de Tipos
DF1 <- data.frame(data_pub_type2)
DF2 <- data.frame(data,
stringsAsFactors = FALSE)
# Cria uma coluna chamada "type" e mostra seu ID
DF2$type <- row.names(DF2)
